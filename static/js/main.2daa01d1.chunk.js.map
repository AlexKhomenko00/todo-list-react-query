{"version":3,"sources":["api/todos.ts","components/TodoItem.tsx","components/TodoList.tsx","components/TodoForm.tsx","App.tsx","index.tsx"],"names":["AUTHORIZATION_HEADER","process","BASE_URL","getAllTodos","a","offset","pageParam","url","fetch","headers","Authorization","res","ok","Error","json","data","console","log","addTodo","title","method","body","JSON","stringify","fields","toggleCompleted","id","completed","deleteTodo","TodoItem","todo","queryClient","useQueryClient","mutateCompleted","useMutation","onMutate","prevTodos","getQueryData","setQueryData","onSuccess","invalidateQueries","onError","setQueriesData","mutateAsync","mutateDelete","isLoading","className","htmlFor","type","onChange","defaultChecked","name","disabled","onClick","TodoList","todos","onNextPage","hasNextPage","map","TodoForm","ref","useRef","isError","error","onSubmit","e","preventDefault","current","value","App","useInfiniteQuery","getNextPageParam","lastPage","fetchNextPage","allTodos","pages","reduce","acc","page","records","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.2daa01d1.chunk.js","sourcesContent":["import { QueryFunction } from \"react-query\";\nimport { AirTableResponse, Todo } from \"../types/todo\";\n\nconst AUTHORIZATION_HEADER = process.env.REACT_APP_API_KEY || \"\";\nconst BASE_URL = \"https://api.airtable.com/v0/app8Cc6HeK1ZkmFYK/Table%201\";\n\nexport const getAllTodos = async ({\n  pageParam: offset,\n}: // TODO: Define type for offset\nany): Promise<AirTableResponse> => {\n  const url = offset\n    ? `${BASE_URL}?pageSize=2&offset=${offset}`\n    : `${BASE_URL}?pageSize=2`;\n  try {\n    const res = await fetch(url + \"&sort%5B0%5D%5Bfield%5D=title\", {\n      headers: {\n        Authorization: `Bearer ${AUTHORIZATION_HEADER}`,\n      },\n    });\n\n    if (!res.ok) {\n      throw new Error(await res.json());\n    }\n\n    const data: AirTableResponse = await res.json();\n\n    return data;\n  } catch (e) {\n    console.log(e);\n    throw e;\n  }\n};\n\nexport const addTodo = async (title: string) => {\n  try {\n    const res = await fetch(BASE_URL, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${AUTHORIZATION_HEADER}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        fields: {\n          title,\n        },\n      }),\n    });\n\n    const data: Todo = await res.json();\n\n    return data;\n  } catch (e) {\n    console.log(e);\n    throw e;\n  }\n};\n\nexport const toggleCompleted = async (id: number, completed: boolean) => {\n  try {\n    const res = await fetch(BASE_URL + `/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        Authorization: `Bearer ${AUTHORIZATION_HEADER}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        fields: {\n          completed,\n        },\n      }),\n    });\n    const data = await res.json();\n\n    return data;\n  } catch (e) {\n    console.log(e);\n    throw e;\n  }\n};\n\nexport const deleteTodo = async (id: number) => {\n  try {\n    const res = await fetch(BASE_URL + `/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${AUTHORIZATION_HEADER}`,\n      },\n    });\n\n    const data = await res.json();\n\n    return data;\n  } catch (e) {\n    console.log(e);\n    throw e;\n  }\n};\n","import { deleteTodo, toggleCompleted } from \"api/todos\";\nimport React from \"react\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { Todo } from \"../types/todo\";\n\ntype TodoItemProps = {\n  todo: Todo;\n};\n\nconst TodoItem = ({ todo }: TodoItemProps): JSX.Element => {\n  const queryClient = useQueryClient();\n\n  const { mutateAsync: mutateCompleted } = useMutation(\n    () => toggleCompleted(todo.id, !todo.fields.completed),\n    {\n      onMutate: () => {\n        const prevTodos: Todo[] | undefined = queryClient.getQueryData(\"todos\");\n        queryClient.setQueryData(\"todos\", prevTodos);\n        return prevTodos;\n      },\n      onSuccess: () => {\n        queryClient.invalidateQueries(\"todos\");\n      },\n      onError: (prevTodos: Todo[] | undefined) => {\n        queryClient.setQueriesData(\"tods\", prevTodos);\n      },\n    }\n  );\n\n  const { mutateAsync: mutateDelete, isLoading } = useMutation(\n    () => deleteTodo(todo.id),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries(\"todos\");\n      },\n    }\n  );\n\n  return (\n    <li className=\"todo-item\">\n      <label htmlFor={`${todo.id}`}>{todo.fields.title}</label>\n      <input\n        type=\"checkbox\"\n        onChange={() => mutateCompleted()}\n        defaultChecked={todo.fields.completed}\n        name=\"completed\"\n        id={`${todo.id}`}\n      />\n      <button disabled={isLoading} onClick={() => mutateDelete()}>\n        Delete task\n      </button>\n    </li>\n  );\n};\n\nexport default TodoItem;\n","import React from \"react\";\n\nimport { AirTableResponse, Todo } from \"types/todo\";\nimport TodoItem from \"components/TodoItem\";\nimport {\n  FetchNextPageOptions,\n  InfiniteQueryObserverResult,\n  useMutation,\n} from \"react-query\";\n\ntype TodoListProps = {\n  todos: Todo[];\n  onNextPage: (\n    options?: FetchNextPageOptions | undefined\n  ) => Promise<InfiniteQueryObserverResult<AirTableResponse, unknown>>;\n  hasNextPage: boolean | undefined;\n};\n\nconst TodoList = ({\n  todos,\n  onNextPage,\n  hasNextPage,\n}: TodoListProps): JSX.Element => {\n  // const [mutateAsync ] = useMutation()\n  return (\n    <>\n      <ul>\n        {todos.map((todo) => (\n          <TodoItem key={todo.id} todo={todo} />\n        ))}\n      </ul>\n      <button onClick={() => onNextPage()} disabled={!hasNextPage}>\n        {hasNextPage ? \"Load more todos\" : \"No more to load\"}\n      </button>\n    </>\n  );\n};\n\nexport default TodoList;\n","import React, { useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"react-query\";\n\nimport { addTodo } from \"api/todos\";\n\nconst TodoForm = () => {\n  const ref = useRef<HTMLInputElement>(null!);\n\n  const queryClient = useQueryClient();\n\n  const { mutateAsync, isLoading, isError, error } = useMutation(addTodo, {\n    onSuccess: () => queryClient.invalidateQueries(\"todos\"),\n  });\n\n  const handleAddTodo = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    mutateAsync(ref.current.value);\n\n    ref.current.value = \"\";\n  };\n\n  return (\n    <form onSubmit={handleAddTodo}>\n      <label htmlFor=\"addTodo\">Enter new todo</label>\n      <input type=\"text\" ref={ref} id=\"addTodo\" />\n      <button type=\"submit\" disabled={isLoading}>\n        {isLoading ? \"Processing...\" : \"Add Todo\"}\n      </button>\n    </form>\n  );\n};\n\nexport default TodoForm;\n","import React from \"react\";\nimport { useInfiniteQuery } from \"react-query\";\n\nimport { Todo } from \"types/todo\";\n\nimport { getAllTodos } from \"api/todos\";\n\nimport TodoList from \"components/TodoList\";\nimport TodoForm from \"components/TodoForm\";\n\nconst App: React.FC = () => {\n  const { data, isLoading, isError, fetchNextPage, hasNextPage } =\n    useInfiniteQuery(\"todos\", getAllTodos, {\n      getNextPageParam: (lastPage) => lastPage.offset,\n    });\n\n  if (isLoading)\n    return (\n      <div className=\"loading\">\n        <p>Loading...</p>\n      </div>\n    );\n\n  if (isError)\n    return (\n      <div className=\"error\">\n        <p>Oops...something went worng. Please try again later</p>\n      </div>\n    );\n\n  const allTodos = data\n    ? data.pages.reduce((acc, page) => [...acc, ...page.records], [] as Todo[])\n    : ([] as Todo[]);\n\n  return (\n    <div className=\"App\">\n      <TodoForm />\n      <TodoList\n        todos={allTodos}\n        onNextPage={fetchNextPage}\n        hasNextPage={hasNextPage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}